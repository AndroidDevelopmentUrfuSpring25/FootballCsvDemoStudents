fun main() {
    println("–ö–∞–π–∞–∞–ª –Ø—Ö—å—è –í–∞—Ä–∏–∞–Ω—Ç 1")
    println("=================================")

    val players = parser.CsvParser.readPlayersFromCsv("src/main/resources/fakePlayers.csv")

    println("\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º:")
    val totalPlayers = players.size
    val positionCounts = players.groupingBy { it.position }.eachCount()
    positionCounts.forEach { (position, count) ->
        val percentage = (count.toDouble() / totalPlayers) * 100
        println("$position: %.2f%%".format(percentage))
    }

    println("\n=================================")

    println("1Ô∏è‚É£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞: ${resolver.Resolver().countPlayersWithoutAgency(players)}")

    val topDefender = resolver.Resolver().topScoringDefender(players)
    println("2Ô∏è‚É£ –õ—É—á—à–∏–π –∑–∞—â–∏—Ç–Ω–∏–∫ –ø–æ –≥–æ–ª–∞–º: ${topDefender?.first} (${topDefender?.second} –≥–æ–ª–æ–≤)")

    val expensiveGermanPosition = resolver.Resolver().mostExpensiveGermanPlayerPosition(players)
    println("3Ô∏è‚É£ –ü–æ–∑–∏—Ü–∏—è —Å–∞–º–æ–≥–æ –¥–æ—Ä–æ–≥–æ–≥–æ –Ω–µ–º–µ—Ü–∫–æ–≥–æ –∏–≥—Ä–æ–∫–∞: ${expensiveGermanPosition ?: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}")

    val mostRedCardsTeam = resolver.Resolver().teamWithMostRedCards(players)
    println("4Ô∏è‚É£ –ö–æ–º–∞–Ω–¥–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å—Ä–µ–¥–Ω–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫—Ä–∞—Å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: ${mostRedCardsTeam ?: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}")

    println("=================================")
}
